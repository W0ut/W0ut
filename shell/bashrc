#╔══════════════════════════════════════════════╗
#║    Examples
#╚══════════════════════════════════════════════╝
	# Параметр    Значение
	# \a  an ASCII bell character (07)
	# \d  дата в формате ''День_недели, Месяц, Число''.
	# \e  an ASCII escape character (033)
	# \h  имя хоста до первой точки.
	# \H  имя хоста
	# \j  количество задач, работающих в шелле в настоящее время
	# \l  название терминала
	# \n  переход на новую строку
	# \r  возврат каретки на начало строки
	# \s  название шелла (будет выведено, например, «bash»
	# \t  время в 24-часовом формате (ЧЧ: MM: СС)
	# \T  время в 12-часовом формате (ЧЧ: ММ: СС)
	# \@  время в 12-часовом формате (AM/PM)
	# \u  имя активного пользователя
	# \v  номер версии bash
	# \V  номер версии bash, номер релиза, номер патча
	# \w  текущая директория (будет выведено в формате /path/to/work_dir_name)
	# \W  имя текущей директории (будет выведено в формате «dir_name\»)
	# \!  номер команды в истории
	# \#  системный номер команды
	# \$  if the effective UID is 0, a #, otherwise a $
	# \\  обратный слэш
	# \[  начало последовательности непечатаемых символов (см. примеры в разделе «Цвета и стилизация».
	# \]  конец последовательности символов
	# $ ( )   внешняя комманда

	# PS1='[\u@\h] $(date +%m/%d/%y) \w $'
#╚══════════════════════════════  End Examples ═╝

# ══ Regular color ════════╗ START ╔═
    BK=$(tput setaf 232)  # Black
    GY=$(tput setaf 246)  # Gray
    RD=$(tput setaf 160)  # Red
    GR=$(tput setaf 46)   # Green
    YW=$(tput setaf 226)  # Yellow
    OR=$(tput setaf 208)  # Orange
    BL=$(tput setaf 80)   # Blue
    MG=$(tput setaf 129)  # Magenta
    PR=$(tput setaf 198)  # Purple
    CY=$(tput setaf 14)   # Cyan
    WH=$(tput setaf 15)   # White
    NM=$(tput sgr0)       # Norm
    BD=$(tput bold)       # Bold
    BG=$(tput setab 3)    # Background Color
# ══ Regular color ════════╝  END  ╚═

# ══ Move cursor ════════╗ START ╔═
    SVC=$(tput sc)      # save position
    RSC=$(tput rc)      # restore position
    NRC=$(tput cnorm)   # back position to norm
    UPC=$(tput cuu1)    # up position 1 line
    DWC=$(tput cud1)    # down position 1 line
    LFC=$(tput cub1)    # left position 1 line
    RGC=$(tput cuf1)    # right position 1 line
    CL1=$(tput el)      # clean line <==|
    CL2=$(tput el1)     # clean line |==>
# ══ Move cursor ════════╝  END  ╚═

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	  *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
	else
	color_prompt=
	fi
fi

#╔═════════════════════════════════════════════════════════════════════════════╗
#║    Get internet ip
#╚═════════════════════════════════════════════════════════════════════════════╝
	INETIP=$(wget -O - -q icanhazip.com)
	CITY=$(curl ipinfo.io &> /tmp/ipinfo && cat /tmp/ipinfo | grep city | awk -F '"' '{print $4}')
#╚═══════════════════════════════════════════════════════════════════════ End ═╝
echo -en "" >> /tmp/MYMODE
MYMODE=$(cat /tmp/MYMODE)
if [[ "$MYMODE" == "1" ]]; then
	if [ "$color_prompt" = yes ]; then
		PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]┏━╼ \[\033[01;33m\]@\[\033[01;31m\]WR\[\033[00m\] \[\033[00;33m\][\[\033[00m\]IP:\[\033[00;37m\]$INETIP\[\033[00;33m\]/\[\033[00;37m\]$CITY\[\033[00;33m\]]\[\033[01;31m\]—[\[\033[1;33m\]HID_MODE\[\033[01;31m\]]—\[\033[01;36m\][\[\033[01;33m\]\w\[\033[01;36m\]]\n\[\033[01;31m\]┗━━━╼\[\033[01;31m\]\$\[\033[00m\]'
	else
		PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
	fi
else
	if [ "$color_prompt" = yes ]; then
		PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]┏━╼ \[\033[01;33m\]@\[\033[01;31m\]WR\[\033[00m\] \[\033[00;33m\][\[\033[00m\]IP:\[\033[00;37m\]$INETIP\[\033[00;33m\]/\[\033[00;37m\]$CITY\[\033[00;33m\]]\[\033[01;36m\][\[\033[01;33m\]\w\[\033[01;36m\]]\n\[\033[01;31m\]┗━━━╼\[\033[01;31m\]\$\[\033[00m\]'
	else
		PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
	fi
fi

#╔════════════════════════════════════════════════════════════════════════════╗
#║    Change all MAC
#╚════════════════════════════════════════════════════════════════════════════╝
	function chmac() {
		ip route show | grep -Eoa "dev.*metric" | awk '{print $2}' | sort -u > /tmp/iface.txt
		while read MYINTERFACE
			do
				ifconfig $MYINTERFACE down 2>/dev/null
				macchanger -r $MYINTERFACE &>/dev/null
				ifconfig $MYINTERFACE up 2>/dev/null
		done < /tmp/iface.txt
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝
#╔════════════════════════════════════════════════════════════════════════════╗
#║    Change Hostname
#╚════════════════════════════════════════════════════════════════════════════╝
	function chhost() {
		echo -en " ${SVC}${NM}Enter NEW HOSTNAME ${NM}${NM}${CY}> ${BD}${RD}"
		read newhn
		cp -n /etc/hosts{,.old}
		idomainname=$(domainname -i)
		fdomainname=$(domainname -f)
		if [[ -z "$newhn" ]]; then
			newhn=$(cat /dev/urandom | tr -dc 'A-Z' | head -c8)
		fi
		echo $newhn > /etc/hostname
		mv /etc/hosts /etc/hosts.old
		echo "127.0.0.1 localhost" > /etc/hosts
		echo "$idomainname  $fdomainname    $newhn" >> /etc/hosts
		echo "# The following lines are desirable for IPv6 capable hosts" >> /etc/hosts
		echo "::1     localhost ip6-localhost ip6-loopback" >> /etc/hosts
		echo "ff02::1 ip6-allnodes" >> /etc/hosts
		echo "ff02::2 ip6-allrouters" >> /etc/hosts
		service hostname stop &>/dev/null
		sleep 1
		service hostname start &>/dev/null
		service networking stop
		sleep 1
		service networking start
		service network-manager stop
		sleep 1
		service network-manager start
		xhost +$newhn &>/dev/null
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝

#╔════════════════════════════════════════════════════════════════════════════╗
#║    Reset all MAC
#╚════════════════════════════════════════════════════════════════════════════╝
	function resmac() {
		ip route show | grep -Eoa "dev.*metric" | awk '{print $2}' | sort -u > /tmp/iface.txt
		while read MYINTERFACE
			do
				ifconfig $MYINTERFACE down 2>/dev/null
				macchanger -p $MYINTERFACE &>/dev/null
				ifconfig $MYINTERFACE up 2>/dev/null
		done < /tmp/iface.txt
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝

#╔════════════════════════════════════════════════════════════════════════════╗
#║    Start tor and Privoxy
#╚════════════════════════════════════════════════════════════════════════════╝
	function setproxy() {
		export all_proxy="socks://localhost:9050/"
		export http_proxy="http://localhost:8118/"
		export https_proxy="http://localhost:8118/"
		export ftp_proxy="http://localhost:8118/"
		export no_proxy="localhost,127.0.0.0/8,::1"
		service tor start && service privoxy start
		INETIP=$(wget -O - -q icanhazip.com)
		CITY=$(curl ipinfo.io &> /tmp/ipinfo && cat /tmp/ipinfo | grep city | awk -F '"' '{print $4}')
		MYMODE=$(cat /tmp/MYMODE)
		if [[ "$MYMODE" == "1" ]]; then
			if [ "$color_prompt" = yes ]; then
				PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]┏━╼ \[\033[01;33m\]@\[\033[01;31m\]WR\[\033[00m\] \[\033[00;33m\][\[\033[00m\]IP:\[\033[00;37m\]$INETIP\[\033[00;33m\]/\[\033[00;37m\]$CITY\[\033[00;33m\]]\[\033[01;31m\]—[\[\033[1;33m\]HID_MODE\[\033[01;31m\]]—\[\033[01;36m\][\[\033[01;33m\]\w\[\033[01;36m\]]\n\[\033[01;31m\]┗━━━╼\[\033[01;31m\]\$\[\033[00m\]'
			else
				PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
			fi
		fi
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝
#╔════════════════════════════════════════════════════════════════════════════╗
#║    Stop tor and Privoxy
#╚════════════════════════════════════════════════════════════════════════════╝
	function unsetproxy() {
		unset all_proxy
		unset http_proxy
		unset https_proxy
		unset ftp_proxy
		service tor stop && service privoxy stop
		INETIP=$(wget -O - -q icanhazip.com)
		CITY=$(curl ipinfo.io &> /tmp/ipinfo && cat /tmp/ipinfo | grep city | awk -F '"' '{print $4}')
		MYMODE=$(cat /tmp/MYMODE)
		if [[ "$MYMODE" == "1" ]]; then
			if [ "$color_prompt" = yes ]; then
				PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]┏━╼ \[\033[01;33m\]@\[\033[01;31m\]WR\[\033[00m\] \[\033[00;33m\][\[\033[00m\]IP:\[\033[00;37m\]$INETIP\[\033[00;33m\]/\[\033[00;37m\]$CITY\[\033[00;33m\]]\[\033[01;31m\]—[\[\033[1;33m\]HID_MODE\[\033[01;31m\]]—\[\033[01;36m\][\[\033[01;33m\]\w\[\033[01;36m\]]\n\[\033[01;31m\]┗━━━╼\[\033[01;31m\]\$\[\033[00m\]'
			else
				PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
			fi
		fi
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝

#╔════════════════════════════════════════════════════════════════════════════╗
#║    Launched pentest mode
#╚════════════════════════════════════════════════════════════════════════════╝
	function setrun() {
		setproxy
		chmac
		chhost
		echo -e ${NM}${WH}"		[${NM}${RD}!${NM}${WH}] Mode pentest ${BD}${GR} LAUNCHED${NM}${WH}."
		echo -e "1" > /tmp/MYMODE
		INETIP=$(wget -O - -q icanhazip.com)
		CITY=$(curl ipinfo.io &> /tmp/ipinfo && cat /tmp/ipinfo | grep city | awk -F '"' '{print $4}')
		MYMODE=$(cat /tmp/MYMODE)
		if [[ "$MYMODE" == "1" ]]; then
			if [ "$color_prompt" = yes ]; then
				PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]┏━╼ \[\033[01;33m\]@\[\033[01;31m\]WR\[\033[00m\] \[\033[00;33m\][\[\033[00m\]IP:\[\033[00;37m\]$INETIP\[\033[00;33m\]/\[\033[00;37m\]$CITY\[\033[00;33m\]]\[\033[01;31m\]—[\[\033[1;33m\]HID_MODE\[\033[01;31m\]]—\[\033[01;36m\][\[\033[01;33m\]\w\[\033[01;36m\]]\n\[\033[01;31m\]┗━━━╼\[\033[01;31m\]\$\[\033[00m\]'
			else
				PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
			fi
		fi
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝
#╔════════════════════════════════════════════════════════════════════════════╗
#║    Stoped pentest mode
#╚════════════════════════════════════════════════════════════════════════════╝
	function unsetrun() {
		unsetproxy
		resmac
		echo -e ${NM}${WH}"		[${NM}${RD}!${NM}${WH}] Mode pentest ${BD}${GR} STOPED${NM}${WH}."
		echo -e "0" > /tmp/MYMODE
		INETIP=$(wget -O - -q icanhazip.com)
		CITY=$(curl ipinfo.io &> /tmp/ipinfo && cat /tmp/ipinfo | grep city | awk -F '"' '{print $4}')
		MYMODE=$(cat /tmp/MYMODE)
		if [[ "$MYMODE" == "0" ]]; then
			if [ "$color_prompt" = yes ]; then
				PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]┏━╼ \[\033[01;33m\]@\[\033[01;31m\]WR\[\033[00m\] \[\033[00;33m\][\[\033[00m\]IP:\[\033[00;37m\]$INETIP\[\033[00;33m\]/\[\033[00;37m\]$CITY\[\033[00;33m\]]\[\033[01;36m\][\[\033[01;33m\]\w\[\033[01;36m\]]\n\[\033[01;31m\]┗━━━╼\[\033[01;31m\]\$\[\033[00m\]'
			else
				PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
			fi
		fi
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
	PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	;;
*)
	;;
esac

#╔═════════════════════════════════════════════════════════════════════════════╗
#║    Enable color support of ls and also add handy aliases
#╚═════════════════════════════════════════════════════════════════════════════╝
	if [ -x /usr/bin/dircolors ]; then
		test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
		alias ls='ls --color=auto'
		#alias dir='dir --color=auto'
		#alias vdir='vdir --color=auto'

		alias grep='grep --color=auto'
		#alias fgrep='fgrep --color=auto'
		#alias egrep='egrep --color=auto'
	fi
#╚═══════════════════════════════════════════════════════════════════════ End ═╝

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
	. /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
  fi
fi

#╔═════════════════════════════════════════════════════════════════════════════╗
#║    Поиск всех запущенных команд пользоватлем
#╚═════════════════════════════════════════════════════════════════════════════╝
	function my_ps() { ps -u $USER -o pid,%cpu,%mem,bsdtime,command ; }

	function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }
#╚═══════════════════════════════════════════════════════════════════════ End ═╝

#╔═════════════════════════════════════════════════════════════════════════════╗
#║    Различные варианты ls
#╚═════════════════════════════════════════════════════════════════════════════╝
	alias la='ls -Al'              # показать скрытые файлы
	alias ls='ls -hF --color'      # выделить различные типы файлов цветом
	alias lx='ls -lXB'             # сортировка по расширению
	alias lk='ls -lS'              # сортировка по размеру
	alias lc='ls -lc'              # сортировка по времени изменения
	alias lu='ls -lu'              # сортировка по времени последнего обращения
	alias lr='ls -lR'              # рекурсивный обход подкаталогов
	alias lt='ls -lt'              # сортировка по дате
	alias lm='ls -al |more'        # вывод через 'more'
	alias tree='tree -Csu'         # альтернатива 'ls'
#╚═══════════════════════════════════════════════════════════════════════ End ═╝

#╔═════════════════════════════════════════════════════════════════════════════╗
#║    Extract archives
#╚═════════════════════════════════════════════════════════════════════════════╝
	function extract () {
	  if [ -f $1 ] ; then
		case $1 in
		  *.tar.bz2) tar xvjf $1   ;;
		  *.tar.gz)  tar xvzf $1   ;;
		  *.bz2)     bunzip2 $1    ;;
		  *.rar)     unrar x $1    ;;
		  *.gz)      gunzip $1     ;;
		  *.tar)     tar xvf $1    ;;
		  *.tbz2)    tar xvjf $1   ;;
		  *.tgz)     tar xvzf $1   ;;
		  *.zip)     unzip $1      ;;
		  *.Z)       uncompress $1 ;;
		  *.7z)      7z x $1       ;;
		  *)         echo "'$1' cannot be extracted via >extract<" ;;
		esac
	  else
		echo "'$1' is not a valid file"
	  fi
	}
#╚═══════════════════════════════════════════════════════════════════════ End ═╝
#╔═════════════════════════════════════════════════════════════════════════════╗
#║  Connect to WIFI
#╚═════════════════════════════════════════════════════════════════════════════╝
    function connwifi() {
        IMANAGED=`iwconfig 2>/dev/null | grep 'Mode:Managed' -B 1 | grep -Ev 'Mode:Managed' | awk '{print $1}'`
        if [[ -n "$IMANAGED" ]]
            then
                echo -e ""
                timeout 3 nmcli d wifi list ifname ${IMANAGED}
                echo -e ""
                echo -en " ${WH}[${RD}!${WH}] ${GR}Enter Name Wifi point ${CY}> ${RD}"
                read WIFINAME
                echo -e ""
                echo -en " ${WH}[${RD}!${WH}] ${GR}Inter Password ${CY}> ${RD}"
                read WIFIPASS
                if [[ -n "${WIFINAME}" && -n "${WIFIPASS}" ]]
                    then
                        WIFICONN=`nmcli d wifi connect "${WIFINAME}" password ${WIFIPASS} ifname ${IMANAGED} | grep -E -a -o "successfully activated"`
                        if [[ -n "${WIFICONN}" ]]
                            then
                                echo ""
                                echo -e "  ${WH}[${RD}!${WH}] ${GR}Connected to ${NM}${BD}${WIFINAME}${NM}${WH} ."
                                echo ""
                            else
                                echo ""
                                echo -e "  ${WH}[${RD}!${WH}] ${GR}Not connected to ${NM}${BD}${WIFINAME}${NM}${WH} ."
                                echo ""
                        fi    
                    else
                        clear
                        echo ""
                        echo -e "  ${WH}[${RD}!${WH}] ${GR}Password or wifi putsy${NM}${WH} ."
                        echo ""
                fi
            else
                clear
                echo ""
                echo -e "  ${WH}[${RD}!${WH}] ${GR}Wireless Card ${BD}${RD}Not Found${NM}${WH} ."
                echo ""
        fi
    }
#╚═══════════════════════════════════════════════════════════════════════ End ═╝
#╔═════════════════════════════════════════════════════════════════════════════╗
#║  Disconnect to WIFI
#╚═════════════════════════════════════════════════════════════════════════════╝
    function diswifi() {
        IMANAGED=`iwconfig 2>/dev/null | grep 'Mode:Managed' -B 1 | grep -Ev 'Mode:Managed' | awk '{print $1}'`
        if [[ -n "$IMANAGED" ]]
            then
                echo -e ""
                WIFIDIS=`nmcli d disconnect ${IMANAGED} | grep -E -a -o "successfully disconnected"`
                if [[ -n "${WIFIDIS}" ]]
                    then
                        echo ""
                        echo -e "  ${WH}[${RD}!${WH}] ${GR}${IMANAGED} Disconnected!${NM}${WH} ."
                        echo ""
                    else
                        echo ""
                        echo -e "  ${WH}[${RD}!${WH}] ${GR}Something went wrong${NM}${WH} ."
                        echo ""
                fi
            else
                clear
                echo ""
                echo -e "  ${WH}[${RD}!${WH}] ${GR}Wireless Card ${BD}${RD}Not Found${NM}${WH} ."
                echo ""
        fi
    }
#╚═══════════════════════════════════════════════════════════════════════ End ═╝
#╔═════════════════════════════════════════════════════════════════════════════╗
#║  Start airmon-ng
#╚═════════════════════════════════════════════════════════════════════════════╝
	function stwl() {
	  INFACE=`iwconfig 2>/dev/null | grep 'Mode:Monitor' | awk '{print $1}'`
	  if [[ -z "$INFACE" ]]
		then
		  IMANAGED=`iwconfig 2>/dev/null | grep 'Mode:Managed' -B 1 | grep -Ev 'Mode:Managed' | awk '{print $1}'`
			if [[ -n "$IMANAGED" ]]
			  then
				airmon-ng start $IMANAGED &>/dev/null
				INFACE=`iwconfig 2>/dev/null | grep 'Mode:Monitor' | awk '{print $1}'`
				  if [[ -n "$INFACE" ]]
					then
						clear
						echo ""
						echo -e ${NM}${WH}"  [${NM}${RD}!${NM}${WH}] Wireless Card${BD}${GR} STARTED${NM}${WH} ."
						echo ""
					else
						clear
						echo ""
						echo -e ${NM}${WH}"  [${NM}${RD}!${NM}${WH}] Wireless Card${NM}${RD} Not Found${NM}${WH} ."
						echo ""
				  fi
					else
					  clear
					  echo ""
					  echo -e ${NM}${WH}"  [${NM}${RD}!${NM}${WH}] Wireless Card${NM}${RD} Not Found${NM}${WH} ."
					  echo ""
			fi
	  fi
	}
#╚═══════════════════════════════════════════════════════════════════════ End ═╝
#╔═════════════════════════════════════════════════════════════════════════════╗
#║  Stop airmon-ng
#╚═════════════════════════════════════════════════════════════════════════════╝
  function stpwl() {
	INFACE=`iwconfig 2>/dev/null | grep 'Mode:Monitor' | awk '{print $1}'`
		if [[ -n "$INFACE" ]]
		then
		  IMANAGED=`iwconfig 2>/dev/null | grep 'Mode:Monitor' | awk '{print $1}'`
			if [[ -n "$IMANAGED" ]]
			  then
				clear
				airmon-ng stop $IMANAGED &>/dev/null
				echo ""
				echo -e ${NM}${WH}"  [${NM}${RD}!${NM}${WH}] Wireless Card${NM}${RD} STOPED${NM}${WH} ."
				echo ""
			  else
				clear
				echo ""
				echo -e ${NM}${WH}"  [${NM}${RD}!${NM}${WH}] Wireless Card${NM}${RD} Not Found${NM}${WH} ."
				echo ""
			fi
		else
		  clear
		  echo ""
		  echo -e ${NM}${WH}"  [${NM}${RD}!${NM}${WH}] Wireless Card${NM}${RD} Not Found${NM}${WH} ."
		  echo ""
		fi
  }
#╚══════════════════════════════════════════════════════════════════════ End ═╝

#╔════════════════════════════════════════════════════════════════════════════╗
#║  Операции сравнения
#╚════════════════════════════════════════════════════════════════════════════╝
	function operators() {
		echo -e " ${BD}${BK}|===================================|"
		echo -e " ${BD}${BK}|       ${BD}${WH}сравнение целых чисел       ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${NM}${BK}-------------------------------  ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}=   ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}-eq ${NM}${GR}\"${NM}${WH}\$b${NM}${GR}\" ${NM}${WH}]]  ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}!=  ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}-ne ${NM}${GR}\"${NM}${WH}\$b${NM}${GR}\" ${NM}${WH}]]  ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}>   ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}-gt ${NM}${GR}\"${NM}${WH}\$b${NM}${GR}\" ${NM}${WH}]]  ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}>=  ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}-ge ${NM}${GR}\"${NM}${WH}\$b${NM}${GR}\" ${NM}${WH}]]  ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}<   ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}-lt ${NM}${GR}\"${NM}${WH}\$b${NM}${GR}\" ${NM}${WH}]]  ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}<=  ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}-le ${NM}${GR}\"${NM}${WH}\$b${NM}${GR}\" ${NM}${WH}]]  ${BD}${BK}|"
		echo -e " ${BD}${BK}|                                   ${BD}${BK}|"
		echo -e " ${BD}${BK}|          ${BD}${WH}сравнение строк          ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${NM}${BK}-------------------------------  ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}=   ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}== \"${NM}${GR}${NM}${WH}\$b\"${NM}${GR} ]${NM}${WH}]   ${BD}${BK}|"
		echo -e " ${BD}${BK}|  ${BD}${GR}!=  ${NM}${PR}>>   ${NM}${RD}if ${NM}${WH}[[ ${NM}${GR}\"${NM}${WH}\$a${NM}${GR}\" ${NM}${CY}!= \"${NM}${GR}${NM}${WH}\$b\"${NM}${GR} ]${NM}${WH}]   ${BD}${BK}|"
		echo -e " ${BD}${BK}|===================================|"
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝

#╔════════════════════════════════════════════════════════════════════════════╗
#║    Create archive
#╚════════════════════════════════════════════════════════════════════════════╝
	function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

	function makezip() { zip -r "${1%%/}.zip" "$1" ; }
#╚══════════════════════════════════════════════════════════════════════ End ═╝

#╔════════════════════════════════════════════════════════════════════════════╗
#║  We hide our presence
#╚════════════════════════════════════════════════════════════════════════════╝
	function iclean() {
		echo > /var/log/auth
		echo > /var/log/auth.log
		echo > /var/log/wtmp
		echo > /var/log/btmp
		echo > /var/log/lastlog
 		history -r
	}
#╚══════════════════════════════════════════════════════════════════════ End ═╝

#╔════════════════════════════════════════════════════════════════════════════╗
#║  My alias
#╚════════════════════════════════════════════════════════════════════════════╝
alias pscpu='ps auxf | sort -nr -k 3 | grep'
alias psmem='ps auxf | sort -nr -k 4 | grep'
alias ping='ping -c 5'
alias update='apt-get update && apt-get upgrade -y'
alias iclear='apt-get autoremove && apt-get autoclean && apt-clean'
alias inst='apt-get install'
alias h='history'
alias j='jobs -l'
alias wifidump='stwl && clear && airodump-ng -i ${INFACE}'
alias resbash=' . ~/.bashrc'
alias imdk3='stwl && clear && mdk3 ${INFACE} d -c'
alias iptab1='sysctl net.ipv4.ip_forward=1'
alias iptab0='sysctl net.ipv4.ip_forward=0'
alias end='shutdown'
alias findip='geoiplookup'
alias proxi='service tor start && proxychains'
alias msf='service postgresql start && service apache2 start && msfconsole'
